from django.db import models

# specify TickData time_period choices
TICK_DATA_TIME_PERIOD_CHOICES = (
    ("1", "daily"),
)

# specify StrategyConfig dimension choices
STRATEGY_CONFIG_DIMENSION_CHOICES = (
    ("1", "close"),
    ("2", "open"),
    ("3", "high"),
    ("4", "low"),
    ("5", "volume"),
    ("6", "N/A"),
)

# specify Signal type choices
SIGNAL_TYPE_CHOICES = (
    ("1", "BUY"),
    ("2", "SELL"),
)


# Example model of no consequence
class ExampleStrategiesModel(models.Model):
    name = models.CharField(max_length=50, blank=False, null=False)

    def __str__(self):
        return self.name


# Company data - ticker is always Yahoo Finance tickers
class Company(models.Model):
    name = models.CharField(max_length=100, blank=False, null=False)
    ticker = models.CharField(max_length=20, blank=False, null=False)
    description = models.TextField(blank=False, null=False)

    def __str__(self):
        return self.name


# Raw sourced data from Yahoo Finance
class TickerData(models.Model):
    open = models.FloatField(blank=False, null=False)
    high = models.FloatField(blank=False, null=False)
    low = models.FloatField(blank=False, null=False)
    close = models.FloatField(blank=False, null=False)
    volume = models.IntegerField(blank=False, null=False)
    time_stamp = models.DateTimeField(blank=False, null=False)
    company = models.ForeignKey(
        to=Company,
        on_delete=models.CASCADE,
        blank=False, null=False
    )
    time_period = models.CharField(
        max_length=20,
        choices=TICK_DATA_TIME_PERIOD_CHOICES,
        default="1",
        blank=False, null=False
    )

    def __str__(self):
        return f"{self.time_stamp} {self.company.name} {self.time_period}"


# Indicator Type and description
class IndicatorType(models.Model):
    name = models.CharField(max_length=100, blank=False, null=False)
    description = models.TextField(blank=False, null=False)

    def __str__(self):
        return self.name


# Strategy type info
class StrategyType(models.Model):
    name = models.CharField(max_length=100, blank=False, null=False)
    description = models.TextField(blank=False, null=False)
    stock_selection = models.TextField(blank=False, null=False)
    entry_criteria = models.TextField(blank=False, null=False)
    exit_criteria = models.TextField(blank=False, null=False)
    stop_loss_method = models.TextField(blank=False, null=False)
    take_profit_method = models.TextField(blank=False, null=False)

    def __str__(self):
        return self.name


# Strategy configuration
class StrategyConfig(models.Model):
    strategy_type = models.ForeignKey(to=StrategyType, on_delete=models.CASCADE, blank=False, null=False)
    indicator_time_period = models.IntegerField(blank=False, null=False)
    max_holding_period = models.IntegerField(blank=False, null=False)
    take_profit_factor = models.IntegerField(blank=False, null=False)
    stop_loss_factor = models.IntegerField(blank=False, null=False)
    sigma = models.IntegerField(blank=True, null=True)
    # lstm_buy_threshold = models.FloatField(blank=True, null=True)
    # lstm_sell_threshold = models.FloatField(blank=True, null=True)
    # lstm_test_train_factor = models.FloatField(blank=True, null=True)
    # lstm_model = models.CharField(blank=True, null=True, max_length=1000)
    dimension = models.CharField(
        max_length=20,
        choices=STRATEGY_CONFIG_DIMENSION_CHOICES,
        default="1",
        blank=False, null=False
    )

    def __str__(self):
        return f"{self.strategy_type.name} dimension: {self.dimension}, time period: {self.indicator_time_period}, sigma: {self.sigma}"


# Signal - generated by strategy
class Signal(models.Model):
    type = models.CharField(
        max_length=20,
        choices=SIGNAL_TYPE_CHOICES,
        blank=False, null=False
    )
    ticker_data = models.ForeignKey(to=TickerData, on_delete=models.CASCADE, blank=False, null=False)
    strategy_config = models.ForeignKey(to=StrategyConfig, on_delete=models.CASCADE, blank=False, null=False)

    def __str__(self):
        return self.type


# Order - execution of signal
class Order(models.Model):
    signal = models.ForeignKey(to=Signal, on_delete=models.CASCADE, blank=False, null=False)
    ticker_data = models.ForeignKey(to=TickerData, on_delete=models.CASCADE, blank=False, null=False)

    def __str__(self):
        return f"{self.signal} {self.ticker_data}"


# Trade - Pair of entry and exit orders per signal
class Trade(models.Model):
    entry_order = models.ForeignKey(to=Order, on_delete=models.CASCADE, related_name="entry_order", blank=False, null=False)
    exit_order = models.ForeignKey(to=Order, on_delete=models.CASCADE, related_name="exit_order", blank=True, null=True)
    duration = models.IntegerField(blank=False, null=False, default=0)
    net_return = models.FloatField(blank=False, null=False)
    return_percent = models.FloatField(blank=False, null=False)

    def __str__(self):
        return f"{self.entry_order} {self.exit_order} {self.return_percent}"


# Visualization Type
class VisualizationType(models.Model):
    name = models.CharField(max_length=100, blank=False, null=False)
    description = models.TextField(blank=False, null=False)

    def __str__(self):
        return self.name
